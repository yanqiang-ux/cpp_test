
str:     file format elf64-x86-64


Disassembly of section .init:

0000000000400768 <_init>:
  400768:	48 83 ec 08          	sub    $0x8,%rsp
  40076c:	48 8b 05 85 08 20 00 	mov    0x200885(%rip),%rax        # 600ff8 <_DYNAMIC+0x200>
  400773:	48 85 c0             	test   %rax,%rax
  400776:	74 05                	je     40077d <_init+0x15>
  400778:	e8 23 00 00 00       	callq  4007a0 <__gmon_start__@plt>
  40077d:	48 83 c4 08          	add    $0x8,%rsp
  400781:	c3                   	retq   

Disassembly of section .plt:

0000000000400790 <__gmon_start__@plt-0x10>:
  400790:	ff 35 72 08 20 00    	pushq  0x200872(%rip)        # 601008 <_GLOBAL_OFFSET_TABLE_+0x8>
  400796:	ff 25 74 08 20 00    	jmpq   *0x200874(%rip)        # 601010 <_GLOBAL_OFFSET_TABLE_+0x10>
  40079c:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004007a0 <__gmon_start__@plt>:
  4007a0:	ff 25 72 08 20 00    	jmpq   *0x200872(%rip)        # 601018 <_GLOBAL_OFFSET_TABLE_+0x18>
  4007a6:	68 00 00 00 00       	pushq  $0x0
  4007ab:	e9 e0 ff ff ff       	jmpq   400790 <_init+0x28>

00000000004007b0 <_ZNSt8ios_base4InitC1Ev@plt>:
  4007b0:	ff 25 6a 08 20 00    	jmpq   *0x20086a(%rip)        # 601020 <_GLOBAL_OFFSET_TABLE_+0x20>
  4007b6:	68 01 00 00 00       	pushq  $0x1
  4007bb:	e9 d0 ff ff ff       	jmpq   400790 <_init+0x28>

00000000004007c0 <__libc_start_main@plt>:
  4007c0:	ff 25 62 08 20 00    	jmpq   *0x200862(%rip)        # 601028 <_GLOBAL_OFFSET_TABLE_+0x28>
  4007c6:	68 02 00 00 00       	pushq  $0x2
  4007cb:	e9 c0 ff ff ff       	jmpq   400790 <_init+0x28>

00000000004007d0 <__cxa_atexit@plt>:
  4007d0:	ff 25 5a 08 20 00    	jmpq   *0x20085a(%rip)        # 601030 <_GLOBAL_OFFSET_TABLE_+0x30>
  4007d6:	68 03 00 00 00       	pushq  $0x3
  4007db:	e9 b0 ff ff ff       	jmpq   400790 <_init+0x28>

00000000004007e0 <_ZNSt8ios_base4InitD1Ev@plt>:
  4007e0:	ff 25 52 08 20 00    	jmpq   *0x200852(%rip)        # 601038 <_GLOBAL_OFFSET_TABLE_+0x38>
  4007e6:	68 04 00 00 00       	pushq  $0x4
  4007eb:	e9 a0 ff ff ff       	jmpq   400790 <_init+0x28>

00000000004007f0 <_ZNSsD1Ev@plt>:
  4007f0:	ff 25 4a 08 20 00    	jmpq   *0x20084a(%rip)        # 601040 <_GLOBAL_OFFSET_TABLE_+0x40>
  4007f6:	68 05 00 00 00       	pushq  $0x5
  4007fb:	e9 90 ff ff ff       	jmpq   400790 <_init+0x28>

0000000000400800 <_ZNSsC1EPKcRKSaIcE@plt>:
  400800:	ff 25 42 08 20 00    	jmpq   *0x200842(%rip)        # 601048 <_GLOBAL_OFFSET_TABLE_+0x48>
  400806:	68 06 00 00 00       	pushq  $0x6
  40080b:	e9 80 ff ff ff       	jmpq   400790 <_init+0x28>

0000000000400810 <_ZNSaIcED1Ev@plt>:
  400810:	ff 25 3a 08 20 00    	jmpq   *0x20083a(%rip)        # 601050 <_GLOBAL_OFFSET_TABLE_+0x50>
  400816:	68 07 00 00 00       	pushq  $0x7
  40081b:	e9 70 ff ff ff       	jmpq   400790 <_init+0x28>

0000000000400820 <_ZNSaIcEC1Ev@plt>:
  400820:	ff 25 32 08 20 00    	jmpq   *0x200832(%rip)        # 601058 <_GLOBAL_OFFSET_TABLE_+0x58>
  400826:	68 08 00 00 00       	pushq  $0x8
  40082b:	e9 60 ff ff ff       	jmpq   400790 <_init+0x28>

0000000000400830 <__gxx_personality_v0@plt>:
  400830:	ff 25 2a 08 20 00    	jmpq   *0x20082a(%rip)        # 601060 <_GLOBAL_OFFSET_TABLE_+0x60>
  400836:	68 09 00 00 00       	pushq  $0x9
  40083b:	e9 50 ff ff ff       	jmpq   400790 <_init+0x28>

0000000000400840 <_Unwind_Resume@plt>:
  400840:	ff 25 22 08 20 00    	jmpq   *0x200822(%rip)        # 601068 <_GLOBAL_OFFSET_TABLE_+0x68>
  400846:	68 0a 00 00 00       	pushq  $0xa
  40084b:	e9 40 ff ff ff       	jmpq   400790 <_init+0x28>

Disassembly of section .text:

0000000000400850 <_start>:
  400850:	31 ed                	xor    %ebp,%ebp
  400852:	49 89 d1             	mov    %rdx,%r9
  400855:	5e                   	pop    %rsi
  400856:	48 89 e2             	mov    %rsp,%rdx
  400859:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  40085d:	50                   	push   %rax
  40085e:	54                   	push   %rsp
  40085f:	49 c7 c0 a0 0a 40 00 	mov    $0x400aa0,%r8
  400866:	48 c7 c1 30 0a 40 00 	mov    $0x400a30,%rcx
  40086d:	48 c7 c7 6a 09 40 00 	mov    $0x40096a,%rdi
  400874:	e8 47 ff ff ff       	callq  4007c0 <__libc_start_main@plt>
  400879:	f4                   	hlt    
  40087a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000400880 <deregister_tm_clones>:
  400880:	b8 7f 10 60 00       	mov    $0x60107f,%eax
  400885:	55                   	push   %rbp
  400886:	48 2d 78 10 60 00    	sub    $0x601078,%rax
  40088c:	48 83 f8 0e          	cmp    $0xe,%rax
  400890:	48 89 e5             	mov    %rsp,%rbp
  400893:	77 02                	ja     400897 <deregister_tm_clones+0x17>
  400895:	5d                   	pop    %rbp
  400896:	c3                   	retq   
  400897:	b8 00 00 00 00       	mov    $0x0,%eax
  40089c:	48 85 c0             	test   %rax,%rax
  40089f:	74 f4                	je     400895 <deregister_tm_clones+0x15>
  4008a1:	5d                   	pop    %rbp
  4008a2:	bf 78 10 60 00       	mov    $0x601078,%edi
  4008a7:	ff e0                	jmpq   *%rax
  4008a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004008b0 <register_tm_clones>:
  4008b0:	b8 78 10 60 00       	mov    $0x601078,%eax
  4008b5:	55                   	push   %rbp
  4008b6:	48 2d 78 10 60 00    	sub    $0x601078,%rax
  4008bc:	48 c1 f8 03          	sar    $0x3,%rax
  4008c0:	48 89 e5             	mov    %rsp,%rbp
  4008c3:	48 89 c2             	mov    %rax,%rdx
  4008c6:	48 c1 ea 3f          	shr    $0x3f,%rdx
  4008ca:	48 01 d0             	add    %rdx,%rax
  4008cd:	48 d1 f8             	sar    %rax
  4008d0:	75 02                	jne    4008d4 <register_tm_clones+0x24>
  4008d2:	5d                   	pop    %rbp
  4008d3:	c3                   	retq   
  4008d4:	ba 00 00 00 00       	mov    $0x0,%edx
  4008d9:	48 85 d2             	test   %rdx,%rdx
  4008dc:	74 f4                	je     4008d2 <register_tm_clones+0x22>
  4008de:	5d                   	pop    %rbp
  4008df:	48 89 c6             	mov    %rax,%rsi
  4008e2:	bf 78 10 60 00       	mov    $0x601078,%edi
  4008e7:	ff e2                	jmpq   *%rdx
  4008e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004008f0 <__do_global_dtors_aux>:
  4008f0:	80 3d 7d 07 20 00 00 	cmpb   $0x0,0x20077d(%rip)        # 601074 <_edata>
  4008f7:	75 11                	jne    40090a <__do_global_dtors_aux+0x1a>
  4008f9:	55                   	push   %rbp
  4008fa:	48 89 e5             	mov    %rsp,%rbp
  4008fd:	e8 7e ff ff ff       	callq  400880 <deregister_tm_clones>
  400902:	5d                   	pop    %rbp
  400903:	c6 05 6a 07 20 00 01 	movb   $0x1,0x20076a(%rip)        # 601074 <_edata>
  40090a:	f3 c3                	repz retq 
  40090c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400910 <frame_dummy>:
  400910:	48 83 3d d8 04 20 00 	cmpq   $0x0,0x2004d8(%rip)        # 600df0 <__JCR_END__>
  400917:	00 
  400918:	74 1e                	je     400938 <frame_dummy+0x28>
  40091a:	b8 00 00 00 00       	mov    $0x0,%eax
  40091f:	48 85 c0             	test   %rax,%rax
  400922:	74 14                	je     400938 <frame_dummy+0x28>
  400924:	55                   	push   %rbp
  400925:	bf f0 0d 60 00       	mov    $0x600df0,%edi
  40092a:	48 89 e5             	mov    %rsp,%rbp
  40092d:	ff d0                	callq  *%rax
  40092f:	5d                   	pop    %rbp
  400930:	e9 7b ff ff ff       	jmpq   4008b0 <register_tm_clones>
  400935:	0f 1f 00             	nopl   (%rax)
  400938:	e9 73 ff ff ff       	jmpq   4008b0 <register_tm_clones>
  40093d:	0f 1f 00             	nopl   (%rax)

0000000000400940 <_Z5carryv>:
#include <iostream>
#include <string>
using namespace std;

int carry() {
  400940:	55                   	push   %rbp
  400941:	48 89 e5             	mov    %rsp,%rbp
  int is [8];
  for (int i = 0; i < 16; i++) {
  400944:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  40094b:	eb 10                	jmp    40095d <_Z5carryv+0x1d>
    is[i] = i;
  40094d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400950:	48 98                	cltq   
  400952:	8b 55 fc             	mov    -0x4(%rbp),%edx
  400955:	89 54 85 d0          	mov    %edx,-0x30(%rbp,%rax,4)
#include <string>
using namespace std;

int carry() {
  int is [8];
  for (int i = 0; i < 16; i++) {
  400959:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  40095d:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  400961:	7e ea                	jle    40094d <_Z5carryv+0xd>
    is[i] = i;
  }
  return 0;
  400963:	b8 00 00 00 00       	mov    $0x0,%eax
}
  400968:	5d                   	pop    %rbp
  400969:	c3                   	retq   

000000000040096a <main>:

int main() {
  40096a:	55                   	push   %rbp
  40096b:	48 89 e5             	mov    %rsp,%rbp
  40096e:	53                   	push   %rbx
  40096f:	48 83 ec 18          	sub    $0x18,%rsp
  std::string name = "name";
  400973:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  400977:	48 89 c7             	mov    %rax,%rdi
  40097a:	e8 a1 fe ff ff       	callq  400820 <_ZNSaIcEC1Ev@plt>
  40097f:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
  400983:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  400987:	be c0 0a 40 00       	mov    $0x400ac0,%esi
  40098c:	48 89 c7             	mov    %rax,%rdi
  40098f:	e8 6c fe ff ff       	callq  400800 <_ZNSsC1EPKcRKSaIcE@plt>
  400994:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  400998:	48 89 c7             	mov    %rax,%rdi
  40099b:	e8 70 fe ff ff       	callq  400810 <_ZNSaIcED1Ev@plt>
  return carry();
  4009a0:	e8 9b ff ff ff       	callq  400940 <_Z5carryv>
  4009a5:	89 c3                	mov    %eax,%ebx
  4009a7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4009ab:	48 89 c7             	mov    %rax,%rdi
  4009ae:	e8 3d fe ff ff       	callq  4007f0 <_ZNSsD1Ev@plt>
  4009b3:	89 d8                	mov    %ebx,%eax
  4009b5:	eb 1a                	jmp    4009d1 <main+0x67>
  4009b7:	48 89 c3             	mov    %rax,%rbx
  4009ba:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  4009be:	48 89 c7             	mov    %rax,%rdi
  4009c1:	e8 4a fe ff ff       	callq  400810 <_ZNSaIcED1Ev@plt>
  4009c6:	48 89 d8             	mov    %rbx,%rax
  4009c9:	48 89 c7             	mov    %rax,%rdi
  4009cc:	e8 6f fe ff ff       	callq  400840 <_Unwind_Resume@plt>
 //cout << a[pos] << endl;
 //string::iterator it = a.end() - 5;
 //cout << *it << (*(it -1) == '/') << endl;
 //string b = a.substr(it-a.begin(), 5);
 //std::cout << b << std::endl;
}
  4009d1:	48 83 c4 18          	add    $0x18,%rsp
  4009d5:	5b                   	pop    %rbx
  4009d6:	5d                   	pop    %rbp
  4009d7:	c3                   	retq   

00000000004009d8 <_Z41__static_initialization_and_destruction_0ii>:
  4009d8:	55                   	push   %rbp
  4009d9:	48 89 e5             	mov    %rsp,%rbp
  4009dc:	48 83 ec 10          	sub    $0x10,%rsp
  4009e0:	89 7d fc             	mov    %edi,-0x4(%rbp)
  4009e3:	89 75 f8             	mov    %esi,-0x8(%rbp)
  4009e6:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
  4009ea:	75 27                	jne    400a13 <_Z41__static_initialization_and_destruction_0ii+0x3b>
  4009ec:	81 7d f8 ff ff 00 00 	cmpl   $0xffff,-0x8(%rbp)
  4009f3:	75 1e                	jne    400a13 <_Z41__static_initialization_and_destruction_0ii+0x3b>
  extern wostream wclog;	/// Linked to standard error (buffered)
#endif
  //@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
  4009f5:	bf 78 10 60 00       	mov    $0x601078,%edi
  4009fa:	e8 b1 fd ff ff       	callq  4007b0 <_ZNSt8ios_base4InitC1Ev@plt>
  4009ff:	ba b8 0a 40 00       	mov    $0x400ab8,%edx
  400a04:	be 78 10 60 00       	mov    $0x601078,%esi
  400a09:	bf e0 07 40 00       	mov    $0x4007e0,%edi
  400a0e:	e8 bd fd ff ff       	callq  4007d0 <__cxa_atexit@plt>
  400a13:	c9                   	leaveq 
  400a14:	c3                   	retq   

0000000000400a15 <_GLOBAL__sub_I__Z5carryv>:
  400a15:	55                   	push   %rbp
  400a16:	48 89 e5             	mov    %rsp,%rbp
  400a19:	be ff ff 00 00       	mov    $0xffff,%esi
  400a1e:	bf 01 00 00 00       	mov    $0x1,%edi
  400a23:	e8 b0 ff ff ff       	callq  4009d8 <_Z41__static_initialization_and_destruction_0ii>
  400a28:	5d                   	pop    %rbp
  400a29:	c3                   	retq   
  400a2a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000400a30 <__libc_csu_init>:
  400a30:	41 57                	push   %r15
  400a32:	41 89 ff             	mov    %edi,%r15d
  400a35:	41 56                	push   %r14
  400a37:	49 89 f6             	mov    %rsi,%r14
  400a3a:	41 55                	push   %r13
  400a3c:	49 89 d5             	mov    %rdx,%r13
  400a3f:	41 54                	push   %r12
  400a41:	4c 8d 25 90 03 20 00 	lea    0x200390(%rip),%r12        # 600dd8 <__frame_dummy_init_array_entry>
  400a48:	55                   	push   %rbp
  400a49:	48 8d 2d 98 03 20 00 	lea    0x200398(%rip),%rbp        # 600de8 <__init_array_end>
  400a50:	53                   	push   %rbx
  400a51:	4c 29 e5             	sub    %r12,%rbp
  400a54:	31 db                	xor    %ebx,%ebx
  400a56:	48 c1 fd 03          	sar    $0x3,%rbp
  400a5a:	48 83 ec 08          	sub    $0x8,%rsp
  400a5e:	e8 05 fd ff ff       	callq  400768 <_init>
  400a63:	48 85 ed             	test   %rbp,%rbp
  400a66:	74 1e                	je     400a86 <__libc_csu_init+0x56>
  400a68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  400a6f:	00 
  400a70:	4c 89 ea             	mov    %r13,%rdx
  400a73:	4c 89 f6             	mov    %r14,%rsi
  400a76:	44 89 ff             	mov    %r15d,%edi
  400a79:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  400a7d:	48 83 c3 01          	add    $0x1,%rbx
  400a81:	48 39 eb             	cmp    %rbp,%rbx
  400a84:	75 ea                	jne    400a70 <__libc_csu_init+0x40>
  400a86:	48 83 c4 08          	add    $0x8,%rsp
  400a8a:	5b                   	pop    %rbx
  400a8b:	5d                   	pop    %rbp
  400a8c:	41 5c                	pop    %r12
  400a8e:	41 5d                	pop    %r13
  400a90:	41 5e                	pop    %r14
  400a92:	41 5f                	pop    %r15
  400a94:	c3                   	retq   
  400a95:	90                   	nop
  400a96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  400a9d:	00 00 00 

0000000000400aa0 <__libc_csu_fini>:
  400aa0:	f3 c3                	repz retq 

Disassembly of section .fini:

0000000000400aa4 <_fini>:
  400aa4:	48 83 ec 08          	sub    $0x8,%rsp
  400aa8:	48 83 c4 08          	add    $0x8,%rsp
  400aac:	c3                   	retq   
